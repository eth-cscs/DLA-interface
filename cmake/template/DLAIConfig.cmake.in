@PACKAGE_INIT@

if (NOT TARGET DLAI)
  include(${CMAKE_CURRENT_LIST_DIR}/DLAI-Targets.cmake)
endif()

# enable custom modules to be used
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})

# ===== VARIABLES
# TODO just if Fortran is enabled by the project?
set(DLAI_WITH_FORTRAN @DLAI_WITH_FORTRAN@)

set(DLAI_WITH_MKL @DLAI_WITH_MKL@)
set(DLAI_WITH_DLAF @DLAI_WITH_DLAF@)
set(DLAI_WITH_DPLASMA @DLAI_WITH_DPLASMA@)
set(DLAI_WITH_ELPA @DLAI_WITH_ELPA@)

# ===== DEPENDENCIES
include(CMakeFindDependencyMacro)

find_dependency(HWLOC)
find_dependency(OpenMP)

# ----- MPI
find_dependency(MPI)

# ----- LAPACK
if (DLAI_WITH_MKL)
  set(LAPACK_TARGET "@LAPACK_TARGET@")
  set(SCALAPACK_TARGET "@SCALAPACK_TARGET@")

  find_dependency(MKL)

  if (TARGET ${LAPACK_TARGET})
    set(LAPACK_FOUND TRUE)
    add_library(LAPACK::LAPACK INTERFACE IMPORTED GLOBAL)
    target_link_libraries(LAPACK::LAPACK INTERFACE ${LAPACK_TARGET})
  else()
    message(FATAL_ERROR "not available")
  endif()

  if (TARGET ${SCALAPACK_TARGET})
    set(SCALAPACK_FOUND TRUE)
    add_library(SCALAPACK::SCALAPACK INTERFACE IMPORTED GLOBAL)
    target_link_libraries(SCALAPACK::SCALAPACK INTERFACE ${SCALAPACK_TARGET})
  endif()
else()
  # TODO
endif()

# ----- BACKENDs
if (DLAI_WITH_DLAF)
  find_dependency(DLAF)
endif()

if (DLAI_WITH_DPLASMA)
  find_dependency(DPLASMA)
endif()

if (DLAI_WITH_ELPA)
  set(ELPA_PACKAGE_NAME @ELPA_PACKAGE_NAME@)
  find_dependency(ELPA)
endif()

check_required_components(DLAF)
