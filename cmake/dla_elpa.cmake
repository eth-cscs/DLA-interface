# Sets ELPA variables according to the given type.
# DLA_HAVE_ELPA is set to ON if ELPA is available, OFF otherwise.
# DLA_ELPA_INCLUDE_DIRS provides the include directory.
# DLA_ELPA_LIBRARY provides the generated link line for ELPA.

include(CheckSymbolExists)

function(dla_find_elpa)
  unset(DLA_ELPA_LIBRARY CACHE)
  unset(DLA_ELPA_INCLUDE_DIRS CACHE)
  set(DLA_HAVE_ELPA OFF CACHE BOOL "ELPA is available (autogenerated)" FORCE)
  setoption(ELPA_ROOT PATH "" "ELPA path")
  setoption(ELPA_VERSION STRING "" "ELPA version")

  if (ELPA_ROOT)
    if (NOT ELPA_VERSION)
      message(FATAL_ERROR "ELPA_VERSION not provided.")
    endif()

    setoption(DLA_ELPA_INC STRING "" "ELPA include path. If empty use default (${ELPA_ROOT}/include/elpa-${ELPA_VERSION})")
    setoption(DLA_ELPA_LIB STRING "" "ELPA link line. If empty use default (-L${ELPA_ROOT}/lib -lelpa)")

    if (DLA_ELPA_INC)
      set(DLA_ELPA_INCLUDE_DIRS ${DLA_ELPA_INC} CACHE PATH "ELPA include path (autogenerated)")
    else()
      set(DLA_ELPA_INCLUDE_DIRS "${ELPA_ROOT}/include/elpa-${ELPA_VERSION}" CACHE PATH "ELPA include path (autogenerated)")
    endif()

    if (DLA_ELPA_LIB)
      separate_arguments(TMP UNIX_COMMAND "${DLA_ELPA_LIB}")
      set(DLA_ELPA_LIBRARY ${TMP} CACHE PATH "ELPA link line (autogenerated)")
    else()
      set(DLA_ELPA_LIBRARY "-L${ELPA_ROOT}/lib -lelpa" CACHE PATH "ELPA link line (autogenerated)")
    endif()

    if (NOT DLA_HAVE_SCALAPACK)
      message(FATAL_ERROR "ScaLAPACK/LAPACK/BLAS not found. dla_find_lapack and dla_find_scalapack have to be called before dla_find_elpa.")
    endif()

    unset(DLA_CHECK_ELPA CACHE)

    set(CMAKE_REQUIRED_INCLUDES "${DLA_ELPA_INCLUDE_DIRS}" "${MPI_CXX_INCLUDE_PATH}")
    set(CMAKE_REQUIRED_LIBRARIES ${DLA_ELPA_LIBRARY} ${DLA_SCALAPACK_LIBRARY} ${DLA_LAPACK_LIBRARY})
    # Check if ELPA works
    CHECK_SYMBOL_EXISTS(elpa_allocate elpa/elpa.h DLA_CHECK_ELPA)
    unset(CMAKE_REQUIRED_LIBRARIES)
    unset(CMAKE_REQUIRED_INCLUDES)

    if (DLA_CHECK_ELPA)
      set(DLA_HAVE_ELPA ON CACHE BOOL "ELPA is available (autogenerated)" FORCE)
      add_definitions(-DDLA_HAVE_ELPA)
    else()
      message(WARNING "ELPA not found.")
      unset(DLA_ELPA_LIBRARY CACHE)
      unset(DLA_ELPA_INCLUDE_DIRS CACHE)
    endif()
  endif()

endfunction()
