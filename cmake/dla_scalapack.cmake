# Sets Scalapack variables according to the given type.
# Scalapack type DLA_SCALAPACK_TYPE can have the following values:
# - Compiler (Default): The compiler add the scalapack flag automatically
#                       therefore no extra link line has to be added.
# - MKL: Uses MKLROOT env. variable or MKL_ROOT variable to find MKL.
#        Only valid if LAPACK Type is set to MKL as well.
#        On Linux systems the type of MPI library used has to be specified
#        using the variable MKL_MPI_TYPE (Default: IntelMPI)
# - Custom: A custom link line has to be specified through DLA_SCALAPACK_LIB.
# DLA_HAVE_SCALAPACK is set to ON if scalapack is available, OFF otherwise.
# DLA_SCALAPACK_LIBRARY provides the generated link line for Scalapack.

include(dla_utils)
include(CheckFunctionExists)

function(dla_find_scalapack)
  unset(DLA_SCALAPACK_LIBRARY CACHE)
  set(DLA_HAVE_SCALAPACK_INTERNAL OFF)

  setoption(DLA_SCALAPACK_TYPE STRING "Compiler" "Scalapack setting")
  set_property(CACHE DLA_SCALAPACK_TYPE PROPERTY STRINGS Compiler MKL Custom)

  if(DLA_SCALAPACK_TYPE STREQUAL "MKL")
    # Need DLA_LAPACK_TYPE=MKL
    if(NOT DLA_LAPACK_TYPE STREQUAL "MKL")
      message(FATAL_ERROR "DLA_SCALAPACK_TYPE=MKL requires DLA_LAPACK_TYPE=MKL")
    endif()

    if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
      set(MKL_BLACS_LIB "-lmkl_blacs_mpich_lp64")
    else()
      setoption(MKL_MPI_TYPE STRING "IntelMPI" "MKL MPI support (Linux only) (IntelMPI (compatible with MPICH, ..) or OpenMPI)")
      set_property(CACHE MKL_MPI_TYPE PROPERTY STRINGS "IntelMPI" "OpenMPI")

      if(MKL_MPI_TYPE MATCHES "OpenMPI")
        set(MKL_BLACS_LIB "-lmkl_blacs_openmpi_lp64")
      elseif(MKL_MPI_TYPE MATCHES "IntelMPI")
        set(MKL_BLACS_LIB "-lmkl_blacs_intelmpi_lp64")
      else()
        message(FATAL_ERROR "Unknown MKL MPI Support: ${MKL_MPI_TYPE}")
      endif()
    endif()
    set(DLA_SCALAPACK_INTERNAL "-lmkl_scalapack_lp64 ${MKL_BLACS_LIB}")

  elseif(DLA_SCALAPACK_TYPE STREQUAL "Custom")
    setoption(DLA_SCALAPACK_LIB STRING "" "Scalapack link line for DLA_SCALAPACK_TYPE = Custom")
    set(DLA_SCALAPACK_INTERNAL "${DLA_SCALAPACK_LIB}")
  elseif(DLA_SCALAPACK_TYPE MATCHES "Compiler")
    set(DLA_SCALAPACK_INTERNAL "")
  else()
    message(FATAL_ERROR "Unknown Scalapack type: ${DLA_SCALAPACK_TYPE)}")
  endif()

  set(DLA_SCALAPACK_LIBRARY "${DLA_SCALAPACK_INTERNAL}" CACHE PATH "Scalapack link line (autogenerated)")

  unset(DLA_CHECK_LAPACK_INTERNAL CACHE)
  set(CMAKE_REQUIRED_LIBRARIES "${DLA_LAPACK_LIBRARY}")
  # Check if LAPACK works (i.e. if dla_find_lapack has been called before).
  CHECK_FUNCTION_EXISTS(dgetrf_ DLA_CHECK_LAPACK_INTERNAL)
  if (NOT DLA_CHECK_LAPACK_INTERNAL)
    message(FATAL_ERROR "LAPACK/BLAS not found. dla_find_lapack has to be called before dla_find_scalapack.")
  endif()
  unset(DLA_CHECK_LAPACK_INTERNAL CACHE)
  unset(CMAKE_REQUIRED_LIBRARIES)

  unset(DLA_CHECK_BLACS CACHE)
  unset(DLA_CHECK_SCALAPACK CACHE)

  set(CMAKE_REQUIRED_LIBRARIES "${DLA_SCALAPACK_LIBRARY} ${DLA_LAPACK_LIBRARY}")
  # Check if SCALAPACK works
  CHECK_FUNCTION_EXISTS(Cblacs_exit DLA_CHECK_BLACS)
  CHECK_FUNCTION_EXISTS(pdpotrf_ DLA_CHECK_SCALAPACK)
  if (NOT DLA_CHECK_SCALAPACK OR NOT DLA_CHECK_BLACS)
    message(FATAL_ERROR "Scalapack not found.")
  endif()
  unset(CMAKE_REQUIRED_LIBRARIES)

  set(DLA_HAVE_SCALAPACK_INTERNAL ON)
  set(DLA_HAVE_SCALAPACK ${DLA_HAVE_SCALAPACK_INTERNAL} CACHE BOOL "Scalapack is available (autogenerated)" FORCE)
  if(DLA_HAVE_SCALAPACK)
    add_definitions(-DDLA_HAVE_SCALAPACK)
  endif()

endfunction()
